name: Build and Push Docker Image with API Status Update

on:
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    container:
      image: ubuntu:latest
      options: --privileged 

    env:
      IMAGE_NAME: "67359e34e7298e02167e9a79"
      IMAGE_ID: "get-lines"
      IMAGE_TAG: "1"
      GIT_REPO_URL: "https://github.com/amol64546/ml-model.git"
      PATH: "/pipelines/component/src/program.py"
      SERVER_URL: "https://ig.aidtaas.com/bob-service"
      DOCKERHUB_USERNAME: "amol64546"
      DOCKERHUB_TOKEN: "dckr_pat_Snzzaoeq1bQWa_9clgOirVncSz4"

    steps:

      - name: Test Basic Commands
        run: |
          echo "Checking basic commands"
          which sudo || echo "sudo not found"
          which apt-get || echo "apt-get not found"

      - name: Fix PATH
        run: |
          export PATH=$PATH:/bin:/usr/bin
          echo $PATH
          which sh || echo "sh not found even after updating PATH"

      - name: Install Basic Tools and Docker
        run: |
          apt-get update && apt-get install -y sudo apt-utils curl
          curl -fsSL https://get.docker.com | sh
          
      - name: Verify Docker Installation
        run: |
          echo "Checking Docker installation..."
          docker --version || echo "Docker not found"
          which docker || echo "Docker path not found"
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image
        run: |
          docker buildx build --push \
            --tag ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} \
            --build-arg GIT_REPO_URL=${{ env.GIT_REPO_URL }} \
            --file docker/Dockerfile \
            --platform linux/amd64,linux/arm64 .

      - name: Update Status via API
        run: |
          if [ $? -eq 0 ]; then
            response=$(curl --location --globoff --request POST "$SERVER_URL/v1.0/ml/brick/image/$IMAGE_ID?status=COMPLETED" \
              --data '' --write-out "%{http_code}" --silent --output /dev/null)
            if [[ "$response" -ge 200 && "$response" -lt 300 ]]; then
              echo "Status update: COMPLETED"
            else
              echo "API call failed with status code: $response"
            fi
          else
            response=$(curl --location --globoff --request POST "$SERVER_URL/v1.0/ml/brick/image/$IMAGE_ID?status=FAILED" \
              --data '' --write-out "%{http_code}" --silent --output /dev/null)
            if [[ "$response" -ge 200 && "$response" -lt 300 ]]; then
              echo "Status update: FAILED"
            else
              echo "API call failed with status code: $response"
            fi
          fi
